{"version":3,"file":"main.ad484f14307bdc72667b.bundle.js","sources":["webpack:///./lib/index.js"],"sourcesContent":["import { createElement, PureComponent } from 'react';\nimport { Resizable } from 're-resizable';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nvar Draggable = require(\"react-draggable\");\r\nvar resizableStyle = {\r\n    width: \"auto\",\r\n    height: \"auto\",\r\n    display: \"inline-block\",\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n};\r\nvar Rnd = /** @class */ (function (_super) {\r\n    __extends(Rnd, _super);\r\n    function Rnd(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.resizing = false;\r\n        _this.resizingPosition = { x: 0, y: 0 };\r\n        _this.refDraggable = function (c) {\r\n            if (!c)\r\n                return;\r\n            _this.draggable = c;\r\n        };\r\n        _this.refResizable = function (c) {\r\n            if (!c)\r\n                return;\r\n            _this.resizable = c;\r\n        };\r\n        _this.state = {\r\n            original: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n            bounds: {\r\n                top: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n            },\r\n            maxWidth: props.maxWidth,\r\n            maxHeight: props.maxHeight,\r\n        };\r\n        _this.onResizeStart = _this.onResizeStart.bind(_this);\r\n        _this.onResize = _this.onResize.bind(_this);\r\n        _this.onResizeStop = _this.onResizeStop.bind(_this);\r\n        _this.onDragStart = _this.onDragStart.bind(_this);\r\n        _this.onDrag = _this.onDrag.bind(_this);\r\n        _this.onDragStop = _this.onDragStop.bind(_this);\r\n        _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);\r\n        return _this;\r\n    }\r\n    Rnd.prototype.componentDidMount = function () {\r\n        var _a = this.getOffsetFromParent(), left = _a.left, top = _a.top;\r\n        var _b = this.getDraggablePosition(), x = _b.x, y = _b.y;\r\n        this.draggable.setState({\r\n            x: x - left,\r\n            y: y - top,\r\n        });\r\n        // HACK: Apply position adjustment\r\n        this.forceUpdate();\r\n    };\r\n    // HACK: To get `react-draggable` state x and y.\r\n    Rnd.prototype.getDraggablePosition = function () {\r\n        var _a = this.draggable.state, x = _a.x, y = _a.y;\r\n        return { x: x, y: y };\r\n    };\r\n    Rnd.prototype.getParent = function () {\r\n        return this.resizable && this.resizable.parentNode;\r\n    };\r\n    Rnd.prototype.getParentSize = function () {\r\n        return this.resizable.getParentSize();\r\n    };\r\n    Rnd.prototype.getMaxSizesFromProps = function () {\r\n        var maxWidth = typeof this.props.maxWidth === \"undefined\" ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;\r\n        var maxHeight = typeof this.props.maxHeight === \"undefined\" ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;\r\n        return { maxWidth: maxWidth, maxHeight: maxHeight };\r\n    };\r\n    Rnd.prototype.getSelfElement = function () {\r\n        return this.resizable && this.resizable.resizable;\r\n    };\r\n    Rnd.prototype.getOffsetHeight = function (boundary) {\r\n        var scale = this.props.scale;\r\n        switch (this.props.bounds) {\r\n            case \"window\":\r\n                return window.innerHeight / scale;\r\n            case \"body\":\r\n                return document.body.offsetHeight / scale;\r\n            default:\r\n                return boundary.offsetHeight;\r\n        }\r\n    };\r\n    Rnd.prototype.getOffsetWidth = function (boundary) {\r\n        var scale = this.props.scale;\r\n        switch (this.props.bounds) {\r\n            case \"window\":\r\n                return window.innerWidth / scale;\r\n            case \"body\":\r\n                return document.body.offsetWidth / scale;\r\n            default:\r\n                return boundary.offsetWidth;\r\n        }\r\n    };\r\n    Rnd.prototype.onDragStart = function (e, data) {\r\n        if (this.props.onDragStart) {\r\n            this.props.onDragStart(e, data);\r\n        }\r\n        if (!this.props.bounds)\r\n            return;\r\n        var parent = this.getParent();\r\n        var scale = this.props.scale;\r\n        var boundary;\r\n        if (this.props.bounds === \"parent\") {\r\n            boundary = parent;\r\n        }\r\n        else if (this.props.bounds === \"body\") {\r\n            var parentRect_1 = parent.getBoundingClientRect();\r\n            var parentLeft_1 = parentRect_1.left;\r\n            var parentTop_1 = parentRect_1.top;\r\n            var bodyRect = document.body.getBoundingClientRect();\r\n            var left_1 = -(parentLeft_1 - parent.offsetLeft * scale - bodyRect.left) / scale;\r\n            var top_1 = -(parentTop_1 - parent.offsetTop * scale - bodyRect.top) / scale;\r\n            var right = (document.body.offsetWidth - this.resizable.size.width * scale) / scale + left_1;\r\n            var bottom = (document.body.offsetHeight - this.resizable.size.height * scale) / scale + top_1;\r\n            return this.setState({ bounds: { top: top_1, right: right, bottom: bottom, left: left_1 } });\r\n        }\r\n        else if (this.props.bounds === \"window\") {\r\n            if (!this.resizable)\r\n                return;\r\n            var parentRect_2 = parent.getBoundingClientRect();\r\n            var parentLeft_2 = parentRect_2.left;\r\n            var parentTop_2 = parentRect_2.top;\r\n            var left_2 = -(parentLeft_2 - parent.offsetLeft * scale) / scale;\r\n            var top_2 = -(parentTop_2 - parent.offsetTop * scale) / scale;\r\n            var right = (window.innerWidth - this.resizable.size.width * scale) / scale + left_2;\r\n            var bottom = (window.innerHeight - this.resizable.size.height * scale) / scale + top_2;\r\n            return this.setState({ bounds: { top: top_2, right: right, bottom: bottom, left: left_2 } });\r\n        }\r\n        else {\r\n            boundary = document.querySelector(this.props.bounds);\r\n        }\r\n        if (!(boundary instanceof HTMLElement) || !(parent instanceof HTMLElement)) {\r\n            return;\r\n        }\r\n        var boundaryRect = boundary.getBoundingClientRect();\r\n        var boundaryLeft = boundaryRect.left;\r\n        var boundaryTop = boundaryRect.top;\r\n        var parentRect = parent.getBoundingClientRect();\r\n        var parentLeft = parentRect.left;\r\n        var parentTop = parentRect.top;\r\n        var left = (boundaryLeft - parentLeft) / scale;\r\n        var top = boundaryTop - parentTop;\r\n        if (!this.resizable)\r\n            return;\r\n        var offset = this.getOffsetFromParent();\r\n        this.setState({\r\n            bounds: {\r\n                top: top - offset.top,\r\n                right: left + (boundary.offsetWidth - this.resizable.size.width) - offset.left / scale,\r\n                bottom: top + (boundary.offsetHeight - this.resizable.size.height) - offset.top,\r\n                left: left - offset.left / scale,\r\n            },\r\n        });\r\n    };\r\n    Rnd.prototype.onDrag = function (e, data) {\r\n        if (this.props.onDrag) {\r\n            var offset = this.getOffsetFromParent();\r\n            this.props.onDrag(e, __assign({}, data, { x: data.x - offset.left, y: data.y - offset.top }));\r\n        }\r\n    };\r\n    Rnd.prototype.onDragStop = function (e, data) {\r\n        if (this.props.onDragStop) {\r\n            var _a = this.getOffsetFromParent(), left = _a.left, top_3 = _a.top;\r\n            return this.props.onDragStop(e, __assign({}, data, { x: data.x + left, y: data.y + top_3 }));\r\n        }\r\n    };\r\n    Rnd.prototype.onResizeStart = function (e, dir, elementRef) {\r\n        e.stopPropagation();\r\n        this.resizing = true;\r\n        var scale = this.props.scale;\r\n        this.setState({\r\n            original: this.getDraggablePosition(),\r\n        });\r\n        if (this.props.bounds) {\r\n            var parent_1 = this.getParent();\r\n            var boundary = void 0;\r\n            if (this.props.bounds === \"parent\") {\r\n                boundary = parent_1;\r\n            }\r\n            else if (this.props.bounds === \"body\") {\r\n                boundary = document.body;\r\n            }\r\n            else if (this.props.bounds === \"window\") {\r\n                boundary = window;\r\n            }\r\n            else {\r\n                boundary = document.querySelector(this.props.bounds);\r\n            }\r\n            var self_1 = this.getSelfElement();\r\n            if (self_1 instanceof Element &&\r\n                (boundary instanceof HTMLElement || boundary === window) &&\r\n                parent_1 instanceof HTMLElement) {\r\n                var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;\r\n                var parentSize = this.getParentSize();\r\n                if (maxWidth && typeof maxWidth === \"string\") {\r\n                    if (maxWidth.endsWith(\"%\")) {\r\n                        var ratio = Number(maxWidth.replace(\"%\", \"\")) / 100;\r\n                        maxWidth = parentSize.width * ratio;\r\n                    }\r\n                    else if (maxWidth.endsWith(\"px\")) {\r\n                        maxWidth = Number(maxWidth.replace(\"px\", \"\"));\r\n                    }\r\n                }\r\n                if (maxHeight && typeof maxHeight === \"string\") {\r\n                    if (maxHeight.endsWith(\"%\")) {\r\n                        var ratio = Number(maxHeight.replace(\"%\", \"\")) / 100;\r\n                        maxHeight = parentSize.width * ratio;\r\n                    }\r\n                    else if (maxHeight.endsWith(\"px\")) {\r\n                        maxHeight = Number(maxHeight.replace(\"px\", \"\"));\r\n                    }\r\n                }\r\n                var selfRect = self_1.getBoundingClientRect();\r\n                var selfLeft = selfRect.left;\r\n                var selfTop = selfRect.top;\r\n                var boundaryRect = this.props.bounds === \"window\" ? { left: 0, top: 0 } : boundary.getBoundingClientRect();\r\n                var boundaryLeft = boundaryRect.left;\r\n                var boundaryTop = boundaryRect.top;\r\n                var offsetWidth = this.getOffsetWidth(boundary);\r\n                var offsetHeight = this.getOffsetHeight(boundary);\r\n                var hasLeft = dir.toLowerCase().endsWith(\"left\");\r\n                var hasRight = dir.toLowerCase().endsWith(\"right\");\r\n                var hasTop = dir.startsWith(\"top\");\r\n                var hasBottom = dir.startsWith(\"bottom\");\r\n                if (hasLeft && this.resizable) {\r\n                    var max = (selfLeft - boundaryLeft) / scale + this.resizable.size.width;\r\n                    this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });\r\n                }\r\n                // INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.\r\n                if (hasRight || (this.props.lockAspectRatio && !hasLeft)) {\r\n                    var max = offsetWidth + (boundaryLeft - selfLeft) / scale;\r\n                    this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });\r\n                }\r\n                if (hasTop && this.resizable) {\r\n                    var max = (selfTop - boundaryTop) / scale + this.resizable.size.height;\r\n                    this.setState({\r\n                        maxHeight: max > Number(maxHeight) ? maxHeight : max,\r\n                    });\r\n                }\r\n                // INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.\r\n                if (hasBottom || (this.props.lockAspectRatio && !hasTop)) {\r\n                    var max = offsetHeight + (boundaryTop - selfTop) / scale;\r\n                    this.setState({\r\n                        maxHeight: max > Number(maxHeight) ? maxHeight : max,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.setState({\r\n                maxWidth: this.props.maxWidth,\r\n                maxHeight: this.props.maxHeight,\r\n            });\r\n        }\r\n        if (this.props.onResizeStart) {\r\n            this.props.onResizeStart(e, dir, elementRef);\r\n        }\r\n    };\r\n    Rnd.prototype.onResize = function (e, direction, elementRef, delta) {\r\n        var x;\r\n        var y;\r\n        var offset = this.getOffsetFromParent();\r\n        if (/left/i.test(direction)) {\r\n            x = this.state.original.x - delta.width;\r\n            // INFO: Apply x position by resize to draggable.\r\n            this.draggable.setState({ x: x });\r\n            x += offset.left;\r\n        }\r\n        if (/top/i.test(direction)) {\r\n            y = this.state.original.y - delta.height;\r\n            // INFO: Apply x position by resize to draggable.\r\n            this.draggable.setState({ y: y });\r\n            y += offset.top;\r\n        }\r\n        if (typeof x === \"undefined\") {\r\n            x = this.getDraggablePosition().x + offset.left;\r\n        }\r\n        if (typeof y === \"undefined\") {\r\n            y = this.getDraggablePosition().y + offset.top;\r\n        }\r\n        this.resizingPosition = { x: x, y: y };\r\n        if (!this.props.onResize)\r\n            return;\r\n        this.props.onResize(e, direction, elementRef, delta, {\r\n            x: x,\r\n            y: y,\r\n        });\r\n    };\r\n    Rnd.prototype.onResizeStop = function (e, direction, elementRef, delta) {\r\n        this.resizing = false;\r\n        var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;\r\n        this.setState({ maxWidth: maxWidth, maxHeight: maxHeight });\r\n        if (this.props.onResizeStop) {\r\n            this.props.onResizeStop(e, direction, elementRef, delta, this.resizingPosition);\r\n        }\r\n    };\r\n    Rnd.prototype.updateSize = function (size) {\r\n        if (!this.resizable)\r\n            return;\r\n        this.resizable.updateSize({ width: size.width, height: size.height });\r\n    };\r\n    Rnd.prototype.updatePosition = function (position) {\r\n        this.draggable.setState(position);\r\n    };\r\n    Rnd.prototype.getOffsetFromParent = function () {\r\n        var scale = this.props.scale;\r\n        var parent = this.getParent();\r\n        var self = this.getSelfElement();\r\n        if (!parent || self === null) {\r\n            return {\r\n                top: 0,\r\n                left: 0,\r\n            };\r\n        }\r\n        var parentRect = parent.getBoundingClientRect();\r\n        var parentLeft = parentRect.left;\r\n        var parentTop = parentRect.top;\r\n        var selfRect = self.getBoundingClientRect();\r\n        var position = this.getDraggablePosition();\r\n        return {\r\n            left: selfRect.left - parentLeft - position.x * scale,\r\n            top: selfRect.top - parentTop - position.y * scale,\r\n        };\r\n    };\r\n    Rnd.prototype.render = function () {\r\n        var _a = this.props, disableDragging = _a.disableDragging, style = _a.style, dragHandleClassName = _a.dragHandleClassName, position = _a.position, onMouseDown = _a.onMouseDown, onMouseUp = _a.onMouseUp, dragAxis = _a.dragAxis, dragGrid = _a.dragGrid, bounds = _a.bounds, enableUserSelectHack = _a.enableUserSelectHack, cancel = _a.cancel, children = _a.children, onResizeStart = _a.onResizeStart, onResize = _a.onResize, onResizeStop = _a.onResizeStop, onDragStart = _a.onDragStart, onDrag = _a.onDrag, onDragStop = _a.onDragStop, resizeHandleStyles = _a.resizeHandleStyles, resizeHandleClasses = _a.resizeHandleClasses, resizeHandleComponent = _a.resizeHandleComponent, enableResizing = _a.enableResizing, resizeGrid = _a.resizeGrid, resizeHandleWrapperClass = _a.resizeHandleWrapperClass, resizeHandleWrapperStyle = _a.resizeHandleWrapperStyle, scale = _a.scale, resizableProps = __rest(_a, [\"disableDragging\", \"style\", \"dragHandleClassName\", \"position\", \"onMouseDown\", \"onMouseUp\", \"dragAxis\", \"dragGrid\", \"bounds\", \"enableUserSelectHack\", \"cancel\", \"children\", \"onResizeStart\", \"onResize\", \"onResizeStop\", \"onDragStart\", \"onDrag\", \"onDragStop\", \"resizeHandleStyles\", \"resizeHandleClasses\", \"resizeHandleComponent\", \"enableResizing\", \"resizeGrid\", \"resizeHandleWrapperClass\", \"resizeHandleWrapperStyle\", \"scale\"]);\r\n        var defaultValue = this.props.default ? __assign({}, this.props.default) : undefined;\r\n        // Remove unknown props, see also https://reactjs.org/warnings/unknown-prop.html\r\n        delete resizableProps.default;\r\n        var cursorStyle = disableDragging || dragHandleClassName ? { cursor: \"auto\" } : { cursor: \"move\" };\r\n        var innerStyle = __assign({}, resizableStyle, cursorStyle, style);\r\n        var _b = this.getOffsetFromParent(), left = _b.left, top = _b.top;\r\n        var draggablePosition;\r\n        if (position) {\r\n            draggablePosition = {\r\n                x: position.x - left,\r\n                y: position.y - top,\r\n            };\r\n        }\r\n        // INFO: Make uncontorolled component when resizing to control position by setPostion.\r\n        var pos = this.resizing ? undefined : draggablePosition;\r\n        return (createElement(Draggable, { ref: this.refDraggable, handle: dragHandleClassName ? \".\" + dragHandleClassName : undefined, defaultPosition: defaultValue, onMouseDown: onMouseDown, onMouseUp: onMouseUp, onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop, axis: dragAxis, disabled: disableDragging, grid: dragGrid, bounds: bounds ? this.state.bounds : undefined, position: pos, enableUserSelectHack: enableUserSelectHack, cancel: cancel, scale: scale },\r\n            createElement(Resizable, __assign({}, resizableProps, { ref: this.refResizable, defaultSize: defaultValue, size: this.props.size, enable: enableResizing, onResizeStart: this.onResizeStart, onResize: this.onResize, onResizeStop: this.onResizeStop, style: innerStyle, minWidth: this.props.minWidth, minHeight: this.props.minHeight, maxWidth: this.resizing ? this.state.maxWidth : this.props.maxWidth, maxHeight: this.resizing ? this.state.maxHeight : this.props.maxHeight, grid: resizeGrid, handleWrapperClass: resizeHandleWrapperClass, handleWrapperStyle: resizeHandleWrapperStyle, lockAspectRatio: this.props.lockAspectRatio, lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth, lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight, handleStyles: resizeHandleStyles, handleClasses: resizeHandleClasses, handleComponent: resizeHandleComponent, scale: this.props.scale }), children)));\r\n    };\r\n    Rnd.defaultProps = {\r\n        maxWidth: Number.MAX_SAFE_INTEGER,\r\n        maxHeight: Number.MAX_SAFE_INTEGER,\r\n        scale: 1,\r\n        onResizeStart: function () { },\r\n        onResize: function () { },\r\n        onResizeStop: function () { },\r\n        onDragStart: function () { },\r\n        onDrag: function () { },\r\n        onDragStop: function () { },\r\n    };\r\n    return Rnd;\r\n}(PureComponent));\n\nexport { Rnd };\n"],"mappings":"AAAA","sourceRoot":""}